// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not16(in=x,out=notx);
   Not16(in=y,out=noty);
   Mux4Way16(a=x ,b=notx ,c=false ,d=true ,sel[1]=zx ,sel[0]=nx ,out=outx );
   Mux4Way16(a=y ,b=noty ,c=false ,d=true ,sel[1]=zy ,sel[0]=ny ,out=outy );
   Add16(a=outx ,b=outy ,out=plusXY );
   And16(a=outx ,b=outy ,out=andXY );
   Not16(in=plusXY,out=notplusXY);
   Not16(in=andXY,out=notandXY);
   Mux4Way16(a=andXY ,b=notandXY ,c=plusXY ,d=notplusXY ,sel[1]=f ,sel[0]=no ,out=outval ,out[0..7]=outval1,out[8..15]=outval2,out[15]=msb);
   And16(a=outval,b=true,out=out);


   // zr
   Or8Way(in=outval1, out=or1);
   Or8Way(in=outval2, out=or2);
   Or(a=or1,b=or2,out=or3);
   Not(in=or3,out=zr);

   // ng
   And(a=msb,b=true,out=ng);

}
